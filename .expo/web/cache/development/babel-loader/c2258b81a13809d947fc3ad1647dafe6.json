{"ast":null,"code":"import { isFunction } from \"./validate\";\nexport function promiseDefer() {\n  var deferred = {\n    resolve: null,\n    reject: null\n  };\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\nexport function promiseWithOptionalCallback(promise, callback) {\n  if (!isFunction(callback)) {\n    return promise;\n  }\n\n  return promise.then(function (result) {\n    if (callback && callback.length === 1) {\n      callback(null);\n    } else if (callback) {\n      callback(null, result);\n    }\n\n    return result;\n  }).catch(function (error) {\n    if (callback) {\n      callback(error);\n    }\n\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"sources":["D:/marketsite/node_modules/@react-native-firebase/app/lib/common/promise.js"],"names":["isFunction","promiseDefer","deferred","resolve","reject","promise","Promise","promiseWithOptionalCallback","callback","then","result","length","catch","error"],"mappings":"AAiBA,SAASA,UAAT;AAKA,OAAO,SAASC,YAAT,GAAwB;AAC7B,MAAMC,QAAQ,GAAG;AACfC,IAAAA,OAAO,EAAE,IADM;AAEfC,IAAAA,MAAM,EAAE;AAFO,GAAjB;AAKAF,EAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIC,OAAJ,CAAY,UAACH,OAAD,EAAUC,MAAV,EAAqB;AAClDF,IAAAA,QAAQ,CAACC,OAAT,GAAmBA,OAAnB;AACAD,IAAAA,QAAQ,CAACE,MAAT,GAAkBA,MAAlB;AACD,GAHkB,CAAnB;AAKA,SAAOF,QAAP;AACD;AAMD,OAAO,SAASK,2BAAT,CAAqCF,OAArC,EAA8CG,QAA9C,EAAwD;AAC7D,MAAI,CAACR,UAAU,CAACQ,QAAD,CAAf,EAA2B;AACzB,WAAOH,OAAP;AACD;;AAED,SAAOA,OAAO,CACXI,IADI,CACC,UAAAC,MAAM,EAAI;AACd,QAAIF,QAAQ,IAAIA,QAAQ,CAACG,MAAT,KAAoB,CAApC,EAAuC;AACrCH,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO,IAAIA,QAAJ,EAAc;AACnBA,MAAAA,QAAQ,CAAC,IAAD,EAAOE,MAAP,CAAR;AACD;;AAED,WAAOA,MAAP;AACD,GATI,EAUJE,KAVI,CAUE,UAAAC,KAAK,EAAI;AACd,QAAIL,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACK,KAAD,CAAR;AACD;;AACD,WAAOP,OAAO,CAACF,MAAR,CAAeS,KAAf,CAAP;AACD,GAfI,CAAP;AAgBD","sourcesContent":["/*\r\n * Copyright (c) 2016-present Invertase Limited & Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this library except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\nimport { isFunction } from './validate';\r\n\r\n/**\r\n *\r\n */\r\nexport function promiseDefer() {\r\n  const deferred = {\r\n    resolve: null,\r\n    reject: null,\r\n  };\r\n\r\n  deferred.promise = new Promise((resolve, reject) => {\r\n    deferred.resolve = resolve;\r\n    deferred.reject = reject;\r\n  });\r\n\r\n  return deferred;\r\n}\r\n\r\n/**\r\n * @param promise\r\n * @param callback\r\n */\r\nexport function promiseWithOptionalCallback(promise, callback) {\r\n  if (!isFunction(callback)) {\r\n    return promise;\r\n  }\r\n\r\n  return promise\r\n    .then(result => {\r\n      if (callback && callback.length === 1) {\r\n        callback(null);\r\n      } else if (callback) {\r\n        callback(null, result);\r\n      }\r\n\r\n      return result;\r\n    })\r\n    .catch(error => {\r\n      if (callback) {\r\n        callback(error);\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}