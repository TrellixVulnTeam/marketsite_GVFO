{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getAppModule, getNativeModule } from \"./registry/nativeModule\";\nimport SharedEventEmitter from \"./SharedEventEmitter\";\nvar firebaseJson = null;\n\nvar FirebaseModule = function () {\n  function FirebaseModule(app, config, customUrlOrRegion) {\n    _classCallCheck(this, FirebaseModule);\n\n    this._app = app;\n    this._nativeModule = null;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this._config = _extends({}, config);\n  }\n\n  _createClass(FirebaseModule, [{\n    key: \"app\",\n    get: function get() {\n      return this._app;\n    }\n  }, {\n    key: \"firebaseJson\",\n    get: function get() {\n      if (firebaseJson) {\n        return firebaseJson;\n      }\n\n      firebaseJson = JSON.parse(getAppModule().FIREBASE_RAW_JSON);\n      return firebaseJson;\n    }\n  }, {\n    key: \"emitter\",\n    get: function get() {\n      return SharedEventEmitter;\n    }\n  }, {\n    key: \"eventNameForApp\",\n    value: function eventNameForApp() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.app.name + \"-\" + args.join('-');\n    }\n  }, {\n    key: \"native\",\n    get: function get() {\n      if (this._nativeModule) {\n        return this._nativeModule;\n      }\n\n      this._nativeModule = getNativeModule(this);\n      return this._nativeModule;\n    }\n  }]);\n\n  return FirebaseModule;\n}();\n\nexport { FirebaseModule as default };\nFirebaseModule.__extended__ = {};","map":{"version":3,"sources":["D:/marketsite/node_modules/@react-native-firebase/app/lib/internal/FirebaseModule.js"],"names":["getAppModule","getNativeModule","SharedEventEmitter","firebaseJson","FirebaseModule","app","config","customUrlOrRegion","_app","_nativeModule","_customUrlOrRegion","_config","JSON","parse","FIREBASE_RAW_JSON","args","name","join","__extended__"],"mappings":";;;AAiBA,SAASA,YAAT,EAAuBC,eAAvB;AACA,OAAOC,kBAAP;AAEA,IAAIC,YAAY,GAAG,IAAnB;;IAEqBC,c;AACnB,0BAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,iBAAzB,EAA4C;AAAA;;AAC1C,SAAKC,IAAL,GAAYH,GAAZ;AACA,SAAKI,aAAL,GAAqB,IAArB;AACA,SAAKC,kBAAL,GAA0BH,iBAA1B;AACA,SAAKI,OAAL,GAAe,SAAc,EAAd,EAAkBL,MAAlB,CAAf;AACD;;;;SAED,eAAU;AACR,aAAO,KAAKE,IAAZ;AACD;;;SAED,eAAmB;AACjB,UAAIL,YAAJ,EAAkB;AAChB,eAAOA,YAAP;AACD;;AACDA,MAAAA,YAAY,GAAGS,IAAI,CAACC,KAAL,CAAWb,YAAY,GAAGc,iBAA1B,CAAf;AACA,aAAOX,YAAP;AACD;;;SAED,eAAc;AACZ,aAAOD,kBAAP;AACD;;;WAGD,2BAAyB;AAAA,wCAANa,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACvB,aAAU,KAAKV,GAAL,CAASW,IAAnB,SAA2BD,IAAI,CAACE,IAAL,CAAU,GAAV,CAA3B;AACD;;;SAED,eAAa;AACX,UAAI,KAAKR,aAAT,EAAwB;AACtB,eAAO,KAAKA,aAAZ;AACD;;AACD,WAAKA,aAAL,GAAqBR,eAAe,CAAC,IAAD,CAApC;AACA,aAAO,KAAKQ,aAAZ;AACD;;;;;;SAnCkBL,c;AAuCrBA,cAAc,CAACc,YAAf,GAA8B,EAA9B","sourcesContent":["/*\r\n * Copyright (c) 2016-present Invertase Limited & Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this library except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\nimport { getAppModule, getNativeModule } from './registry/nativeModule';\r\nimport SharedEventEmitter from './SharedEventEmitter';\r\n\r\nlet firebaseJson = null;\r\n\r\nexport default class FirebaseModule {\r\n  constructor(app, config, customUrlOrRegion) {\r\n    this._app = app;\r\n    this._nativeModule = null;\r\n    this._customUrlOrRegion = customUrlOrRegion;\r\n    this._config = Object.assign({}, config);\r\n  }\r\n\r\n  get app() {\r\n    return this._app;\r\n  }\r\n\r\n  get firebaseJson() {\r\n    if (firebaseJson) {\r\n      return firebaseJson;\r\n    }\r\n    firebaseJson = JSON.parse(getAppModule().FIREBASE_RAW_JSON);\r\n    return firebaseJson;\r\n  }\r\n\r\n  get emitter() {\r\n    return SharedEventEmitter;\r\n  }\r\n\r\n  // TODO Handle custom url or region?\r\n  eventNameForApp(...args) {\r\n    return `${this.app.name}-${args.join('-')}`;\r\n  }\r\n\r\n  get native() {\r\n    if (this._nativeModule) {\r\n      return this._nativeModule;\r\n    }\r\n    this._nativeModule = getNativeModule(this);\r\n    return this._nativeModule;\r\n  }\r\n}\r\n\r\n// Instance of checks don't work once compiled\r\nFirebaseModule.__extended__ = {};\r\n"]},"metadata":{},"sourceType":"module"}