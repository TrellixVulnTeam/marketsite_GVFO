{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar linkProviderId = 'emailLink';\nvar passwordProviderId = 'password';\n\nvar EmailAuthProvider = function () {\n  function EmailAuthProvider() {\n    _classCallCheck(this, EmailAuthProvider);\n\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  _createClass(EmailAuthProvider, null, [{\n    key: \"EMAIL_LINK_SIGN_IN_METHOD\",\n    get: function get() {\n      return linkProviderId;\n    }\n  }, {\n    key: \"EMAIL_PASSWORD_SIGN_IN_METHOD\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"PROVIDER_ID\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"credential\",\n    value: function credential(email, password) {\n      return {\n        token: email,\n        secret: password,\n        providerId: passwordProviderId\n      };\n    }\n  }, {\n    key: \"credentialWithLink\",\n    value: function credentialWithLink(email, emailLink) {\n      return {\n        token: email,\n        secret: emailLink,\n        providerId: linkProviderId\n      };\n    }\n  }]);\n\n  return EmailAuthProvider;\n}();\n\nexport { EmailAuthProvider as default };","map":{"version":3,"sources":["D:/marketsite/node_modules/@react-native-firebase/auth/lib/providers/EmailAuthProvider.js"],"names":["linkProviderId","passwordProviderId","EmailAuthProvider","Error","email","password","token","secret","providerId","emailLink"],"mappings":";;AAiBA,IAAMA,cAAc,GAAG,WAAvB;AACA,IAAMC,kBAAkB,GAAG,UAA3B;;IAEqBC,iB;AACnB,+BAAc;AAAA;;AACZ,UAAM,IAAIC,KAAJ,CAAU,yEAAV,CAAN;AACD;;;;SAED,eAAuC;AACrC,aAAOH,cAAP;AACD;;;SAED,eAA2C;AACzC,aAAOC,kBAAP;AACD;;;SAED,eAAyB;AACvB,aAAOA,kBAAP;AACD;;;WAED,oBAAkBG,KAAlB,EAAyBC,QAAzB,EAAmC;AACjC,aAAO;AACLC,QAAAA,KAAK,EAAEF,KADF;AAELG,QAAAA,MAAM,EAAEF,QAFH;AAGLG,QAAAA,UAAU,EAAEP;AAHP,OAAP;AAKD;;;WAED,4BAA0BG,KAA1B,EAAiCK,SAAjC,EAA4C;AAC1C,aAAO;AACLH,QAAAA,KAAK,EAAEF,KADF;AAELG,QAAAA,MAAM,EAAEE,SAFH;AAGLD,QAAAA,UAAU,EAAER;AAHP,OAAP;AAKD;;;;;;SA/BkBE,iB","sourcesContent":["/*\r\n * Copyright (c) 2016-present Invertase Limited & Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this library except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\nconst linkProviderId = 'emailLink';\r\nconst passwordProviderId = 'password';\r\n\r\nexport default class EmailAuthProvider {\r\n  constructor() {\r\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\r\n  }\r\n\r\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\r\n    return linkProviderId;\r\n  }\r\n\r\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\r\n    return passwordProviderId;\r\n  }\r\n\r\n  static get PROVIDER_ID() {\r\n    return passwordProviderId;\r\n  }\r\n\r\n  static credential(email, password) {\r\n    return {\r\n      token: email,\r\n      secret: password,\r\n      providerId: passwordProviderId,\r\n    };\r\n  }\r\n\r\n  static credentialWithLink(email, emailLink) {\r\n    return {\r\n      token: email,\r\n      secret: emailLink,\r\n      providerId: linkProviderId,\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}